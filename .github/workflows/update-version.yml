name: Update Version and Create Release

on:
  push:
    branches:
      - main

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Version Extraction
        run: |
          echo "Current version raw: '${{ env.version }}'"

      - name: Get the current version
        id: get_version
        run: |
          current_version=$(git describe --tags --abbrev=0 --match "v*")
          echo "Current version: $current_version"
          echo "version=$current_version" >> $GITHUB_ENV

      - name: Determine version bump
        id: version-bump
        run: |
          branch_name="${{ github.ref_name }}"
          echo "branch name: ${branch_name}"
          if [[ "$branch_name" == feature/* ]]; then
            echo "BUMP=minor" >> $GITHUB_ENV
          elif [[ "$branch_name" == fix/* ]]; then
            echo "BUMP=patch" >> $GITHUB_ENV
          elif [[ "$branch_name" == version/* ]]; then
            echo "BUMP=major" >> $GITHUB_ENV
          else
            echo "BUMP=patch" >> $GITHUB_ENV
          fi

      - name: Increment version
        id: increment_version
        run: |
          current_version="${{ env.version }}"
          current_version="${current_version#v}"  


          if [[ ! $current_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version format is invalid: $current_version"
            exit 1
          fi

          major=$(echo "$current_version" | cut -d. -f1)
          minor=$(echo "$current_version" | cut -d. -f2)
          patch=$(echo "$current_version" | cut -d. -f3)

          if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
            echo "Version parsing failed: $current_version"
            exit 1
          fi

          case "$BUMP" in
            patch) 
              patch=$((patch + 1))
              ;;
            minor) 
              minor=$((minor + 1))
              patch=0
              ;;
            major) 
              minor=$((major + 1))
              minor=0   # Resetăm minor
              patch=0   # Resetăm patch
              ;;
          esac

          new_version="v${major}.${minor}.${patch}"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Update version in code
        run: |
          echo "Updating version to ${{ env.new_version }}"
          echo ${{ env.new_version }} > version.txt

      - name: Commit and push version update
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git add version.txt
          git commit -m "Update version to ${{ env.new_version }}"
          git push

      - name: Create new tag
        run: |
          git tag "${{ env.new_version }}"
          git push origin "${{ env.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.new_version }}"
          release_name: "Release ${{ env.new_version }}"
          body: |
            Changes in this Release:
            - Added new feature
            - Fixed a bug
          draft: false
          prerelease: false
